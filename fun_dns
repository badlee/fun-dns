#!/usr/local/bin/node
/*
    |¯\ |\| |¯    | | |¯| |¯  ¯|¯   |\| /¯\ |\/| |¯
    |_/ | |  ¯|   |¯| |_|  ¯|  |    | | |¯| |  | |¯
     _   _   _   _____   _____        _____   _____   _____         _____   _   _   __   _  
    | | | | | | /  ___/ |_   _|      |  ___| /  _  \ |  _  \       |  ___| | | | | |  \ | | 
    | | | | | | | |___    | |        | |__   | | | | | |_| |       | |__   | | | | |   \| | 
 _  | | | | | | \___  \   | |        |  __|  | | | | |  _  /       |  __|  | | | | | |\   | 
| |_| | | |_| |  ___| |   | |        | |     | |_| | | | \ \       | |     | |_| | | | \  | 
\_____/ \_____/ /_____/   |_|        |_|     \_____/ |_|  \_\      |_|     \_____/ |_|  \_| 

*/
// Copyright (c) 2011 Badlee Oshimin
//
//			badlee.oshimin[at]gmail[dot]com
//			github.com/badlee
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//


process.path = process.argv[0];
process.argv.shift();

var sys = require('util'),
	puts = sys.puts,
	ini = require('parser.js'),
	ndns = require('ndns.js'),
	uri = require('url'),
	pcode = require('punycode'),
	fs = require('fs');
CONSOLE = require('console.js');
require('_extend.js');
function appProtocol(a,dir){
	var url = uri.parse(a.toLowerCase());
	if(url.protocol ===  "app:")
		a = a.replace("app:/",dir||__dirname);
	return a;
};
var UpdateConfFile = null;
function parseUrl (url) {
    // TODO: Add support for ftp username
    var p = {}, m;
    if (m = url.match(/((\w+):\/\/)?([^\/:]+)?(:([0-9]+))?([^\?#]+)?(\?([^#]+))?(#(.+))?/)) {
        p['scheme'] = m[2]|| null;
        p['host']   = m[3]|| null;
        p['port']   = m[5]|| null;
        p['path']   = m[6]|| null;
        p['args']   = m[8]|| {};
        p['anchor'] = m[10] || null;
        return p;
    }

    return false;
}

var findZone = false;
var fun_dns = [
	0,/*Majeur*/
	1,/*Mineur*/
	12, /*Build*/
	'release' /*state*/
];

process.version = process.versions.fun_dns = fun_dns.join(".");
var options = require("options")([
		['p', 'port', ':', "Port d'ecoute du serveur." ],
		['h', 'host', ':', "Port d'ecoute du serveur." ],
		['c', 'conf',    ':', 'Fichier de configuration(hostname).'],
		['s', 'servConf', ':', "Fichier de configuration(serveur)." ],
		['l', 'log' , ':', "Fichier de log"],
		['v', 'version', '',  "Obtention de la version",function(){
			CONSOLE.log("fun_dns-"+process.versions.fun_dns);
			process.exit();
		}],
		['z',"zone",':',"Obtention d'une zoneWalk",function(zone){
			findZone = true;
			var walk = function (a_root_servers_net, domain) {
				var resolver = ndns.createClient('udp4');
				puts(domain);
				var req = resolver.request(53, a_root_servers_net);

				req.setHeader({
				id: 1992,
				rd: 1,
				qdcount: 1});
				req.addQuestion (domain, "NSEC", "IN");
				req.send();

				req.on("response", function (res) {
				var rr;
				for (var i = 0; i < res.rr.length; i++) {
					rr = res.rr[i];
					if (rr.typeName == "NSEC") {
					walk(a_root_servers_net, rr.rdata.next_domain_name);
					break;
					}
				}
				});
			}

			require('dns').resolve4(zone, function (err, addrs) {
				if (err){
					CONSOLE.error("Error", err);
					process.exit();
				};
				if (addrs.length > 0)
				walk(addrs[0], ".");
				process.exit();
			});
		}]
	],{
		script : "fun_dns",
		values : '',
		desc :
"     _   _   _   _____   _____        _____   _____   _____         _____   _   _   __   _\n"+ 
"    | | | | | | /  ___/ |_   _|      |  ___| /  _  \\ |  _  \\       |  ___| | | | | |  \\ | |\n"+ 
"    | | | | | | | |___    | |        | |__   | | | | | |_| |       | |__   | | | | |   \\| |\n"+ 
" _  | | | | | | \\___  \\   | |        |  __|  | | | | |  _  /       |  __|  | | | | | |\\   |\n"+ 
"| |_| | | |_| |  ___| |   | |        | |     | |_| | | | \\ \\       | |     | |_| | | | \\  |\n"+ 
"\\_____/ \\_____/ /_____/   |_|        |_|     \\_____/ |_|  \\_\\      |_|     \\_____/ |_|  \\_|\n"+
"                                      Fun DNS  est un serveur DNS ecrit au dessus de nodejs\n"
	});

var conf;
servConfig = options.servConf || "app://config/serv.ini";
PROXY = [];
NAMES = {};
TTL =  {
	ttl : 600,
	ip : 77,
	refresh : 1800,
	retry : 900,
	expiration : 604800
};
SPF = 'v=spf1 +mx -all';

CONSOLE.setLog(options.log || "/var/log/fun_dns.log");

if(!findZone){
	var dgram = require('dgram');
	var server = ndns.createServer('udp4');
	var client = ndns.createClient('udp4');

	var CACHE_DNS = {};
	var proxy = function(req,res,name,i){
		if(CACHE_DNS[name]){
			res.setHeader(req.header);
			//CACHE_DNS[name].header = req.header;
			for (var i = 0; i < req.q.length; i++)
				res.addQuestion(req.q[i]);
			
			res.header.qr = CACHE_DNS[name].header.qr;
			res.header.ra = CACHE_DNS[name].header.ra;
			res.header.rd = CACHE_DNS[name].header.rd;

			/* Nombre de reponse */
			res.header.ancount = CACHE_DNS[name].header.ancount;
			/* Nombre de namespace */
			res.header.nscount = CACHE_DNS[name].header.nscount;
			/* Nombre de reponse aditionnel */
			res.header.arcount = CACHE_DNS[name].header.arcount;

			res.rr = CACHE_DNS[name].rr;
			
			res.send();
			CONSOLE.info(req.remoteAdrr(),"Found",name,"on Cache data");
			return;
		};
		i = i || 0;
		if(!PROXY.length){
			res.send(res);
			CONSOLE.warn("Not found",name,": Proxies list is empty");
			return;
		};
		
		var c_req = client.request(PROXY[i].port||53, PROXY[i].host);
		
		c_req.on("response", function (c_res) {
			try{
				clearTimeout(this.timeout);
				if((c_res.header.ancount+c_res.header.nscount+c_res.header.arcount)){
					res.send(c_res);
					CONSOLE.info("Found",name,"on", PROXY[i].host+":"+(PROXY[i].port||53));
					CACHE_DNS[name] = c_res;
					setTimeout((function(name){
						CACHE_DNS[name]=false;
					}).bind(null,name),1000*60*60*60);
				}else{
					CONSOLE.info("\tNot Found", name ," on this DNS : ", PROXY[i].host+":"+(PROXY[i].port||53));
					if(++i<PROXY.length){
						proxy(req,res,name,i);
					}else{
						res.send(c_res);
						CONSOLE.warn("Not found",name,"on all proxies");
					}
				}
			}catch(e){};
		});
		c_req.send(req);
		
		c_req.timeout  = setTimeout((function(name){
			CONSOLE.info("\tRequest",name,"Timeout on : ", PROXY[i].host+":"+(PROXY[i].port||53));
			//try{this.socket.close();}catch(e){};
			if(++i<PROXY.length){
				proxy(req,res,name,i);
			}else{
				res.send(res);
				CONSOLE.warn("Not found",name,"on all proxies");
			}
		}).bind(c_req,name),1500);
		CONSOLE.info("\tTry DNS ", PROXY[i].host+":"+(PROXY[i].port||53));
	};
	function str_replace(search, replace, subject/*, count*/){
		var i = 0,
        j = 0,
        temp = '',
        repl = '',
        sl = 0,
        fl = 0,
        f = [].concat(search),
        r = [].concat(replace),
        s = subject,
        ra = Object.prototype.toString.call(r) === '[object Array]',
        sa = Object.prototype.toString.call(s) === '[object Array]';
		s = [].concat(s);

		for (i = 0, sl = s.length; i < sl; i++) {
		    if (s[i] === '') {
		        continue;
		    }
		    for (j = 0, fl = f.length; j < fl; j++) {
		        temp = s[i] + '';
		        repl = ra ? (r[j] !== undefined ? r[j] : '') : r[0];
		        s[i] = (temp).split(f[j]).join(repl);
		        
		    }
		}
		return sa ? s : s[0];
	}
	var replaceWildChar = function(data,name,m){
		return str_replace([
			"{name}","$1","$2","$3","$4","$5","$6","$7","$8","$9"
		],[
			name,
			m[1] || "",
			m[2] || "",
			m[3] || "",
			m[4] || "",
			m[5] || "",
			m[6] || "",
			m[7] || "",
			m[8] || "",
			m[9] || "",
		],data);
	}
	var getRecords = function(typeName,data,name,m){
		var ret = {
			REP : [],
			NS  : [],
			ADD : []
		};
		m = m || [];
		var i=0;
		var j,k=0;
		for(i in data){
			switch(i.toLowerCase()){
				case 'ip':
					if(typeName != "a" && typeName != "any") break;
					/* adresse IP */
					data[i] = data[i] instanceof Array ? data[i] : [data[i]];
					data[i].rotate(1);
					for(var x=0; x< data[i].length;x++)
						ret.REP.push([replaceWildChar(name,name,m),TTL.ip, "IN", "A",  replaceWildChar(data[i][x],name,m)]);
					break;
				case 'description':
					if(typeName != "txt" && typeName != "any") break;
					ret.REP.push([replaceWildChar(name,name,m), TTL.ttl, "IN", "TXT", replaceWildChar(data[i],name,m)]);
					break;
				case 'autority':
					if(typeName != "soa" && typeName != "any") break;
					data[i] = String(data[i]).replace("@",".").replace(/[ ]+/,"").split(',').slice(0,2);
					data[i] = data[i].length ==1 ? data[i].concat(data[i]) : data[i]; 
					ret.REP.push([replaceWildChar(name,name,m), TTL.ttl, "IN", "SOA"]
						.concat(replaceWildChar(data[i],name,m)).concat([UpdateConfFile,TTL.refresh, TTL.retry, TTL.ttlxpiration, TTL.ttl]));
					break;
				case 'mail':
					if(typeName != "mx" && typeName != "spf" && typeName != "any") break;
					data[i] = data[i] instanceof Array ? data[i] : [data[i]];
					var k = 0;
					if(typeName == "mx" || typeName == "any"){
						data[i].rotate(1);
						for(j = 0;j< data[i].length;j++){
							data[i][j].name = data[i][j].name? data[i][j].name : "mail."+name;
							ret.REP.push([replaceWildChar(name,name,m), TTL.ttl, "IN", "MX", data[i][j].priority || (++k)*5, replaceWildChar(data[i][j].name,name,m)]);
							if(data[i][j].ip){
								data[i][j].ip = data[i][j].ip instanceof Array ? data[i][j].ip : [data[i][j].ip];
								data[i][j].ip.rotate(1);
								for(var x=0; x< data[i][j].ip.length;x++)
									ret.ADD.push([replaceWildChar(data[i][j].name,name,m), TTL.ip, "IN", "A", replaceWildChar(data[i][j].ip[x],name,m)]);
							}
						}
					}
					if(typeName == "spf" || typeName == "any"){
						ret.REP.push([name, TTL.ttl, "IN", "SPF", SPF]);
						ret.REP.push([name, TTL.ttl, "IN", "TXT", SPF]);
					}
					break;
				case 'nameserver':
					if(typeName != "ns" && typeName != "any") break;
					data[i].rotate(1);
					for(j = 0;j< data[i].length;j++){
						data[i][j].name = replaceWildChar(data[i][j].name? data[i][j].name : "ns"+(++k++)+"."+name,name,m);
						ret.NS.push([replaceWildChar(name,name,m), TTL.ttl, "IN", "NS" , data[i][j].name]);
						if(data[i][j].ip){
							data[i][j].ip = data[i][j].ip instanceof Array ? data[i][j].ip : [data[i][j].ip];
							data[i][j].ip.rotate(1);
							for(var x=0; x< data[i][j].ip.length;x++)
								ret.ADD.push([data[i][j].name, TTL.ip, "IN", "A", replaceWildChar(data[i][j].ip[x],name,m)]);
						};
					}
					break;
				
				case 'alias':
					if(typeName != "cname" && typeName != "any") break;
					data[i].rotate(1);
					for(j = 0;j< data[i].length;j++){
						data[i][j].name = replaceWildChar(data[i][j].name? data[i][j].name : "ns"+(++k++)+"."+name,name,m);
						ret.REP.push([replaceWildChar(name,name,m), TTL.ttl, "IN", "CNAME" , data[i][j].name]);
						if(data[i][j].ip){
							data[i][j].ip = data[i][j].ip instanceof Array ? data[i][j].ip : [data[i][j].ip];
							data[i][j].ip.rotate(1);
							for(var x=0; x< data[i][j].ip.length;x++)
								ret.ADD.push([data[i][j].name, TTL.ip, "IN", "A", replaceWildChar(data[i][j].ip[x],name,m)]);
						};
					}
					break;
			}
		}
		return ret;
	};
	server.on("request", function(req, res) {
		if (req.q.length > 0) {
			var name = req.q[0].name;
			var uname = pcode.toUnicode(name).toLowerCase(); // domain name is case insensitive
			if (name == ".")
				name = "";
			/* Test le nom */
			if(req.q[0].className.toLowerCase() == "in"){
				//find info dns here
				var rec;
				if(NAMES && NAMES.hasOwnProperty(uname)){
				    rec = getRecords(req.q[0].typeName.toLowerCase(),NAMES[uname],name);
				    CONSOLE.info('Found', uname);
				}else{
					if(NAMES){
				   		for(i in NAMES){
					   		if(i.search(/\!/) != 0) continue;	
					   		t = i
					   			.replace("!","")
	                            .replace(/\./g,"\\.")
	                            .replace("*","(.*)")
	                            .replace("%w","([a-zA-Z0-9_]+)")
	                            .replace("%d","([0-9]+)")
	                            .replace("%h","([a-fA-F0-9]+)");
				   			t = new RegExp("^"+t+"$");
				   			var m;
				   			if(m = uname.match(t)){
				   				CONSOLE.info("Found",t,"in",uname);
				   				rec = getRecords(req.q[0].typeName.toLowerCase(),NAMES[i],name,m);
				   				break;
				   			}
				   			t = '';
				   		}
				   	}
				}
			}
			/* ** */
			if(!rec && PROXY.length){
				CONSOLE.warn("Not found",name,"on this server, try to use proxy");
				proxy(req,res,name);
				return;
			}else if(!rec){
				res.setHeader(req.header);	
				for (var i = 0; i < req.q.length; i++)
					res.addQuestion(req.q[i]);
			
				res.header.qr = 1;
				res.header.ra = 1;
				res.header.rd = 0;
				
				/* Nombre de reponse */
				//res.header.ancount = 0;
				/* Nombre de namespace */
				//res.header.nscount = 0;
				/* Nombre de reponse aditionnel */
				//res.header.arcount = 0;
				res.send();
				CONSOLE.warn("Not found",name,"on this server.");
				return;
			}
			
			res.setHeader(req.header);	
			for (var i = 0; i < req.q.length; i++)
				res.addQuestion(req.q[i]);
			
			res.header.qr = 1;
			res.header.ra = 1;
			res.header.rd = 0;
			
			/* Nombre de reponse */
			res.header.ancount = rec.REP.length;
			/* Nombre de namespace */
			res.header.nscount = rec.NS.length;
			/* Nombre de reponse aditionnel */
			res.header.arcount = rec.ADD.length;
			/* ajout des reponses */
			var j = 1;
			/* ajout des NS */
			for(var i=0;i<rec.NS.length;i++){
				res.addRR.apply(res,rec.NS[i]);
			}

			for(var i=0;i<rec.REP.length;i++){
				res.addRR.apply(res,rec.REP[i]);
			}

			/* ajout des ADD */
			for(var i=0;i<rec.ADD.length;i++){
				res.addRR.apply(res,rec.ADD[i]);
			}
			
		}else{
			res.setHeader(req.header);	
			for (var i = 0; i < req.q.length; i++)
				res.addQuestion(req.q[i]);
		};
		res.send();
	});
	var loadConf = function(conf){
		try{
			CONSOLE.info("LOAD Config Domain name");
			conf = JSON.parse(conf);
			for(var i in conf){
				if(!conf.hasOwnProperty(i)) continue;
				var i1 = i.toLowerCase();
				if(i != i1){
					if(conf[i1]) { CONSOLE.warn("Multiple declaration of", i1); continue; }
					conf[i1] = conf[i];
					delete conf[i];
				}
			}
			NAMES = conf;
			CONSOLE.info("\tConfig loaded");
		}catch(e){
			CONSOLE.error("\tError on decode Config",e.stack,"#",conf,"#");
		}
		CONSOLE.info("End LOAD Config");
	}
	/* function for load server */
	var loadDataServer = function(serv,proxyOnly){
		serv.nameserver = serv.nameserver && serv.nameserver.length ? serv.nameserver[0] : [];
		  
		  serv.TTL = serv.ttl || TTL;
		  TTL.ttl = serv.TTL.ttl || TTL.ttl;
		  TTL.ip = serv.TTL.ip || TTL.ip;
		  TTL.refresh = serv.TTL.refresh || TTL.refresh;
		  TTL.retry = serv.TTL.retry || TTL.retry;
		  TTL.expiration = serv.TTL.expiration || TTL.expiration;
		  SPF = serv.spf || SPF;		  
		  
		  PROXY =  [];
		  CONSOLE.info("LOAD DNS Server");
		  for(i in serv.nameserver){
		  	if(typeof serv.nameserver[i] == "string"){
		  		CONSOLE.info("\tADD DNS Server",serv.nameserver[i]);
			  	PROXY.push(parseUrl(String(serv.nameserver[i])));
			}
		  }
		  if(PROXY.length)
		  	CONSOLE.info(PROXY.length+" DNS Server added");
		  else
		  	CONSOLE.info("No DNS Server to add");
		  if(Boolean(proxyOnly))return;
		  /*define config page*/
		  conf = options.conf || serv.conf || "app://config/conf.json";
		  conf = appProtocol(conf);
		  fs.readFile(conf, function (err, data) {
			  if (err){
			  	CONSOLE.error('Fatal Error : Can\'t read Config at ' + conf );
			  	process.exit(1);
			  };
			
			  UpdateConfFile = fs.statSync(conf).mtime.format("Ymd"+(Math.floor(Math.random()*99+10)));
			  loadConf(String(data));
			  fs.watchFile(conf, function (curr, prev) {
					fs.readFile(conf, function (err, data) {
						if (err){
						  	CONSOLE.error('Can\'t read Config at ' + conf );
						  	return;
						  };
						loadConf(String(data));
					});
				});
				
			  serv = {
				host : options.host || serv.host || null,
				port : options.port || serv.port || 53
			  };
			  serv.port = Number(serv.port);
			  if(serv.host && serv.host != 0){
				  server.bind(serv.port, serv.host);
				  CONSOLE.info('Started server on ' + serv.host + ':' + serv.port);
			  }else{
			  	server.bind(serv.port);
			  	CONSOLE.info('Started server on *:' + serv.port);
			  }
			});
		  /* ** */
	}
	/* ** */
	/* function pour */
	/* ** */
	servConfig = appProtocol(servConfig);
	fs.readFile(servConfig, function (err, data) {
	  if (err){
	  	CONSOLE.error('Fatal Error : Can\'t read Config server at ' + servConfig );
	  	process.exit(1);
	  };
	  loadDataServer(ini.parseString(String(data),true));
	  fs.watchFile(servConfig, function (curr, prev) {
			fs.readFile(servConfig, function (err, data) {
				if (err){
				  	CONSOLE.error('Can\'t read Config server at ' + servConfig );
				  	return;
				  };
				loadDataServer(ini.parseString(String(data),true),true);
			});
		});
	});
};

process.on('uncaughtException', function (err) {
  CONSOLE.error("Erreur",":", err.code || err.stack || err);
  if(err.code){
  	switch(err.code){
  		case 'EADDRNOTAVAIL':
  			CONSOLE.error("\tL'adresse n'est pas disponible!");
  			break;
  		case 'EADDRINUSE':
  			CONSOLE.error("\tLe port est deja utilise!");
  			break;
  		case 'EACCES':
  			CONSOLE.error("\tVerifier vos droits!");
  			break;
  	}
  	process.exit();
  };
});
